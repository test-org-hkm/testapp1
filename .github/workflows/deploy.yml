env:
  API_BASE_URL: ${{ secrets.API_BASE_URL }}
  APP_NAME: testapp1
  AWS_REGION: ap-south-1
  NAMESPACE: utils
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: ${{ env.AWS_REGION }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - id: login-ecr
      name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    - env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      id: build-image
      name: Build and push Docker image
      run: 'docker build -t $ECR_REGISTRY/${{ github.event.repository.name }}:$IMAGE_TAG
        .

        docker push $ECR_REGISTRY/${{ github.event.repository.name }}:$IMAGE_TAG

        echo "image=$ECR_REGISTRY/${{ github.event.repository.name }}:$IMAGE_TAG"
        >> $GITHUB_OUTPUT'
    - id: check-deployment
      name: Check if deployment exists via API
      run: 'RESPONSE=$(curl -s -X GET -H "Content-Type: application/json" -H "Authorization:
        Bearer ${{ secrets.API_TOKEN }}" "${{ env.API_BASE_URL }}/api/deployment/exists?name=${{
        env.APP_NAME }}&namespace=${{ env.NAMESPACE }}")

        EXISTS=$(echo $RESPONSE | jq -r ''.exists'')

        echo "exists=$EXISTS" >> $GITHUB_OUTPUT

        echo "Deployment exists: $EXISTS"'
    - env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      if: steps.check-deployment.outputs.exists == 'true'
      name: Call API to patch deployment
      run: 'curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer
        ${{ secrets.API_TOKEN }}" -d "{\"deployment\": \"${{ env.APP_NAME }}\", \"namespace\":
        \"${{ env.NAMESPACE }}\", \"image\": \"$ECR_REGISTRY/${{ github.event.repository.name
        }}:$IMAGE_TAG\"}" ${{ env.API_BASE_URL }}/api/deployment/patch'
    - if: steps.check-deployment.outputs.exists == 'false'
      name: Apply K8s files via API if deployment doesn't exist
      run: 'DEPLOYMENT_YAML=$(cat k8s/deployment.yaml | base64 -w 0)

        SECRET_YAML=$(cat k8s/secret.yaml | base64 -w 0)

        SERVICE_YAML=$(cat k8s/service.yaml | base64 -w 0)

        curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer
        ${{ secrets.API_TOKEN }}" -d "{\"files\":[{\"name\":\"deployment.yaml\",\"content\":\"$DEPLOYMENT_YAML\"},{\"name\":\"secret.yaml\",\"content\":\"$SECRET_YAML\"},{\"name\":\"service.yaml\",\"content\":\"$SERVICE_YAML\"}]}"
        ${{ env.API_BASE_URL }}/api/deployment/apply'
name: Build and Deploy
'on':
  push:
    branches:
    - main
